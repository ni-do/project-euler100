// The sequence of triangle numbers is generated by adding 
// the natural numbers. So the 7th triangle number would be 
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number 
// to have over five divisors.

// What is the value of the first triangle number 
// to have over five hundred divisors?

const getTriangleNumber = (index) => {
    let sum = 0
    for (let i = 1; i <= index; i++) {
        sum += i
    }
    return sum
}

const getFirstTriangleNumberWith500Divisors = () => {
    let triangleNumber = 0
    let numOfDivisors = 0
    let i = 1
    while (numOfDivisors <= 500) {
        triangleNumber = getTriangleNumber(i)
        numOfDivisors = getNumberOfDivisors(triangleNumber)
        if(numOfDivisors > 500) {
            console.log('first triangleNumber 500 divisors:', getDivisors(triangleNumber))
            console.log('first triangleNumber with 500 divisors:', triangleNumber)
            console.log('first triangleNumber with 500 divisors index:', i)
            break
        }
        i++
    }
    return triangleNumber
}

const getDivisors = (triangleNumber) => {
    const divisors = [1]
    for (let d = 2; d <= triangleNumber/2; d++) {
        triangleNumber % d === 0 ? divisors.push(d) : null
    }
    divisors.push(triangleNumber)
    return divisors
}

const getNumberOfDivisors = (triangleNumber) => {
    let numOfDivisors = triangleNumber === 1 ? 1 : 2
    for (let d = 2; d <= triangleNumber/2; d++) {
        triangleNumber % d === 0 ? numOfDivisors++ : null
    }
    return numOfDivisors
}

const triangleNumber = getFirstTriangleNumberWith500Divisors()